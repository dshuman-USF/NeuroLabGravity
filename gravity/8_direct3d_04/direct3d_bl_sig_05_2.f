        program direct3d_bl_sig_05
c       ****************************************************************************
c       Program to read *dir file
c       generated by postodir3d_*.f subroutine in main gravity programs
c
c       Displays rotating 3-D plot of distance between
c       two particles and distance of each with respect to origin see: 
c       Lindsey and Gerstein  J. Neurosci, Meth. 2005.
c
c       Reduce ambiguities associated with gravity by 
c       aiding identification of the direction of an interaction (pre vs post-synaptic) when
c       effector and acceptor charges decay in opposite directions
c
c               NOTE The program REQUIRES a readin of a *.dir file generated by a 
c       main gravity program or a significance test version of gravity that gens  control files. 
c
c       version that also plots sig cloud: "last" points from each of 20 shifted data sets
c       *******************************************************************************
        INCLUDE 'head_04.def'
        include 'config.defs'
c       or other appropriate header with cblock, iblock, rblock, etc
c       
c       NOTE nstep= max number of displayed gravity 'steps' or frames
c       saved in input files;  npairs = MN*(MN-1)/2; MN= max number of
c       different event codes (inc neurons) allowed
c       NOTE: Depending on the "def" file INCLUDED...
c               parameter MN is defined in HEADER - def file
C       place at top before parameters
        parameter(nstep=1000,npair=2016, pi=3.1415926,MN=64)
        parameter(NCFR=20)

c       NCFR =  number of control files
c       ...defines sig. level: 20 = .05 , 100 = .01 etc.
c
c       next line dimensions arrays contain x,y,z coord for "sig cloud"
c       of 100 final positions for each of 'npair' pairs of particles
c
        dimension fromor_c(NCFR,MN),disb_c(NCFR,npair)
        dimension PDIS(MN,MN),dis(MN), fromor(nstep,MN)
        dimension disb(nstep,npair)
        dimension icolor(34)
        real  xref,yref,zref,radius,theta,phi,factor
        real camera(13)
        real grad,sign
        character*30 DIRFILE,reply
        character*1 inst
        character confil (NCFR) *30 ! array of NCFR file names
        data(icolor(i), i=1,34) 
     +  /3,4,5,6,7,8,9,10,11,12,13,14,15,16,
     +  17,18,19,20,21,22,23,24,
     +   25,26,27,28,29,30,31,32,34,35,1,2/
        include 'sbparam.defs'
c
c
c       INPUT *.dir FILES NAME (TO BE READ IN or passed from calling program)
c
c       ***********************************
c       **********************************
c       **********************************
c       PROGRAM ENTRY AND REDO POINT
c       ***********************************
c       **********************************
c       **********************************
c                                                  
5       print 10
10      FORMAT (2x,' INPUT *.dir filename, <CR> to exit: ',$)
        read (*,'(A)') DIRFILE
        if (DIRFILE.eq.' ') goto 4001 ! EXIT PROGRAM                                                      
        OPEN(UNIT=1,FILE=DIRFILE,STATUS='OLD',FORM='UNFORMATTED')
c
c       read header
c
        read (1) CBLOCK,IBLOCK,RBLOCK !read in header info

C       ***** LOOP TO READ  INPUT BLOCKS (records) ***** 
c       ****** and fill display arrays *************  
c
        do K=1,nstep                                        
        READ (1,END=902)((PDIS(I,J),J=1,I-1),I=2,N)
c
c
c
        ipt=1
          do  I=2,N
            do J=1,I-1
            disb(K,ipt)= PDIS(I,J) ! store distance between I,J at time step K
            ipt=ipt+1  
c                use ipt, NOT array dimensioned I x J x K > less space
             end do
          end do
c
        READ (1,END=902)(dis(I),I=1,N)

         do L =1, N
         fromor(K,L)=dis(L) ! store dis frm orig for particle N at time step K
         end do                                
      end do
                      
C       **** DONE WITH UN-shifted data READ ************
902     CLOSE (UNIT=1)
        ns=K-1 ! actual number of steps
        numpr=(N*(N-1))/2 ! number of pairs                                                               
c
c       ************************************************************
c       READ in final x,y,z coordinates to plot characteristics of each pair
c        for each of NCFR shifted data sets. 
c       ************************************************************
c
        confil(1)='sh1.dir'
        confil(2)='sh2.dir'
        confil(3)='sh3.dir'
        confil(4)='sh4.dir'
        confil(5)='sh5.dir'
        confil(6)='sh6.dir'
        confil(7)='sh7.dir'
        confil(8)='sh8.dir'
        confil(9)='sh9.dir'
        confil(10)='sh10.dir'
        confil(11)='sh11.dir'
        confil(12)='sh12.dir'
        confil(13)='sh13.dir'
        confil(14)='sh14.dir'
        confil(15)='sh15.dir'
        confil(16)='sh16.dir'
        confil(17)='sh17.dir'
        confil(18)='sh18.dir'
        confil(19)='sh19.dir'
        confil(20)='sh20.dir'

c       *******************************************************************
c       START 'CONTROL' LOOP
c       ******************************************************************
        do jz=1,NCFR
        dirfile= confil(jz)
      
        
        
        OPEN (UNIT=1,file=dirfile,status='OLD',form='UNFORMATTED')
c       read header
        read (1) CBLOCK,IBLOCK,RBLOCK !read in header info
c        go through whole loop to get last values in file ...
c
c
        do K=1,nstep                                       
      READ (1,END=9999)((PDIS(I,J),J=1,I-1),I=2,N)
        READ (1,END=9999)(dis(I),I=1,N)
        end do
9999      CLOSE (UNIT=1)

        ns=K-1 ! actual number of steps
c       now store 'last in' values for this round in the loop
c
        ipt=1
          do  I=2,N
            do J=1,I-1
            disb_c(jz,ipt)= PDIS(I,J) ! store distance between I,J at time step K
            ipt=ipt+1  
            end do
          end do
c

         do L =1, N
         fromor_c(jz,L)=dis(L) ! store dis frm orig for particle N at time step K
         end do
c
c
c
        end do
c       *******************************************************************
c       END 'CONTROL' LOOP - previous line
c       ******************************************************************
c       *****  initialize parameter maximums and minimums  ***********
c
c       trajectories are plotted in 3D coordinate system...
c
c       z- axis is distance between particles in pair
c       y- axis is distance of particle y from origin
c       x- axis is distance of particle x from origin
c
        zmax=0.
        xmax=0.
        ymax=0.
        fmax=0.
        
c       *****  get maximum x, y values  ***
c       scan all steps of original data

        do K=1,ns
          do L =1, N
            xmax=AMAX1(xmax,fromor(K,L))
          end do
        end do
c       now scan last 'point' coordinates of each of 20 control sets
        do jz=1,NCFR
          do  lz=1, N ! inner loop = number of different pairs
          xmax=AMAX1(xmax,fromor_c(jz,lz))
          end do
        end do  

        ymax=xmax

c       *****  get minimum and maximum z values  ***
c       scan all steps of original data

        do K=1,ns ! outer loop = number of steps
          do  L=1, numpr ! inner loop = number of different pairs
          zmax=AMAX1(zmax,disb(K,L))
          end do
        end do

c       now scan last 'point' coordinates of each of 20 control sets
        
        do jz=1,NCFR
          do lz =1, numpr
            zmax=AMAX1(zmax,disb_c(jz,lz))
          end do
        end do
        

        fmax=AMAX1(fmax,xmax)
        fmax=AMAX1(fmax,ymax)
        fmax=AMAX1(fmax,zmax)
        sclfac=1.0/fmax ! all x,y,z coord mul by this to fit in graph space
c
c       GLOBAL SCALE FACTOR NOW DEFINED
c
c       RESCALE DATA TO BE PLOTTED TO FIT IN COORDINATE SPACE
c       DO THIS NOW TO SPEED UP PLOT ROTATION LATER
c
c       ...and change x,y coord by sub all SCALED values from 1.0 - since 'origin
c       in plot is 'in the back' and = 1,1,1 in the graph space, but 0,0,0 for the data
c
        do K=1,ns
            do L =1, N
            fromor(K,L)= 1.0-(fromor(K,L)*sclfac)
            end do
        end do



        do jz=1,NCFR
                do  lz=1, N ! inner loop = number of different pairs
                fromor_c(jz,lz) = 1.0-(fromor_c(jz,lz)*sclfac)
                end do  
        end do  

c       for future 'z' coord just scale

        do K=1,ns ! outer loop = number of steps
          do  L=1, numpr ! inner loop = number of different pairs
            disb(K,L)=  disb(K,L)*sclfac
          end do
        end do


        do K=1,NCFR ! outer loop = number of steps
          do  L=1, numpr ! inner loop = number of different pairs
            disb_c(K,L)=  disb_c(K,L)*sclfac
          end do
        end do


        call mode(0)
C       NEXT 3 lines create custom window
C
        fildes=gopen(1024,768,-700,-5,'direct3d')
        if (fildes.eq.-1) stop
c
        call colors(fildes)
        call mode(3) 
c
c ***********************************************************
c       initialize the camera settings here
c ***********************************************************
        factor=1.6
        xref=0.5
        yref=0.5
        zref=0.5
        theta=degrad(-25.)
c       theta=degrad(-20.)
        phi=degrad(36.)
c       phi=degrad(35.)
        grad=degrad(5.0)
c ***********************************************************
c       set camera parameters here
c ***********************************************************
        radius=factor
        camera(INT(CAM_CAMX))=radius*COS(phi)*SIN(theta)+xref
        camera(INT(CAM_CAMY))=radius*SIN(phi)+yref
        camera(INT(CAM_CAMZ))=-(radius*COS(phi)*COS(theta))+zref
        camera(INT(CAM_REFX))=xref
        camera(INT(CAM_REFY))=yref
        camera(INT(CAM_REFZ))=zref
        camera(INT(CAM_FIELD_OV))=60.
        camera(INT(CAM_UPX))=-SIN(theta)*SIN(phi)
        camera(INT(CAM_UPY))=COS(phi)
        camera(INT(CAM_UPZ))=SIN(phi)*COS(theta)
        camera(INT(CAM_PROJECTION))=CAM_PARALLEL
        camera(INT(CAM_FRONT))=0.
        camera(INT(CAM_BACK))=0.
        call view_camera(fildes,camera)
        call mode(3)
        call colors(fildes)
c       *****************************************
c       *****************************************
c       SET UP PAIR COUNTER HERE
        icount=0
c       *********************************************
c       *********************************************
c       LOOP POINT HERE - loop for each particle pair i.e., each single projection
c       *********************************************
c       *********************************************
          do  I=2,N
            do J=1,I-1
            icount = icount+1
c
c
c***********************************************************
c       set the port
c***********************************************************
        call clear_control(fildes,CLEAR_VIEWPORT)
        call clear_view_surface(fildes)
        call set_p1_p2(fildes,FRACTIONAL,0.,0.,0.,1.,.9,1.0)
        call vdc_extent(fildes,-1.0,-1.0,-1.0,1.25,1.0,1.0)
        call mapping_mode(fildes,ISOTROPIC)
        call view_camera(fildes,camera)
        call background_color_idx(fildes,0)
        call line_color_idx(fildes,5)
      call view_camera(fildes,camera)
c ***********************************************************
c ***********************************************************
c       draw the axes
c ***********************************************************
        call move3d(fildes,0.0,0.0,0.0)
        call draw3d(fildes,0.0,1.0,0.0)
        call draw3d(fildes,0.0,1.0,1.0)
        call draw3d(fildes,0.0,0.0,1.0)
        call draw3d(fildes,0.0,0.0,0.0)
        call draw3d(fildes,1.0,0.0,0.0)
        call draw3d(fildes,1.0,0.0,1.0)
        call draw3d(fildes,0.0,0.0,1.0)
        call move3d(fildes,0.0,1.0,1.0)
        call draw3d(fildes,1.0,1.0,1.0)
        call draw3d(fildes,1.0,0.0,1.0)
      call move3d(fildes,0.0,1.0,0.0)
      call draw3d(fildes,1.0,1.0,0.0)
      call draw3d(fildes,1.0,0.0,0.0)
      call move3d(fildes,1.0,1.0,0.0)
      call draw3d(fildes,1.0,1.0,1.0)
c
c ***********************************************************
c       draw the plot for ONE SELECTED PAIR: IN,JN
c ***********************************************************
c
c       
c
c
c       z-axis is distance between particles in pair - this is "y" axis in plotting space
c       y- axis is distance of particle y from origin - this is "z" axis in plottuing space
c       x- axis is distance of particle x from origin
c
c
        call line_color_idx(fildes,icolor(5))
c       define aliases to keep track or coordinates
        ixc=J
        iyc=I
        izc=icount
c
        do K=1,ns-1 !    draw all steps for this pair NOW

        call move3d(fildes,fromor(K,ixc),
     +       disb(K,izc),fromor(K,iyc))     
        
        call draw3d(fildes,fromor(K+1,ixc),
     +       disb(K+1,izc),fromor(K+1,iyc))     
                
c
        end do 
c       projection drawn- now highlight w/marker and particle numbers
c       represented
c
c       in next two calls, lcol=color value for respective label feature
c
        lcol= icolor(8)
                call mark(fildes,fromor(ns,ixc),
     +       disb(ns,izc),fromor(ns,iyc),lcol)
        
        call numbers(fildes,fromor(ns,ixc),
     +       disb(ns,izc),fromor(ns,iyc),I,J,lcol)
c
c       ******************************************************
c       ******************************************************
c
c       NOW DRAW SIG LIMITS 'CLOUD'
c     "cloud" of 20 final points for all 20 control datasets!!
c       size of each 3-D 'point' in cloud determined by variable 'size'
c
c
        call line_color_idx(fildes,icolor(10))
        size=0.005 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
c
c
c
c
        do K=1,NCFR ! outer loop = number of steps
        call move3d(fildes,fromor_c(K,ixc)-size,
     +       disb_c(K,izc),fromor_c(K,iyc))         
        call draw3d(fildes,fromor_c(K,ixc)+size,
     +       disb_c(K,izc),fromor_c(K,iyc))
c    
c       
        call move3d(fildes,fromor_c(K,ixc),
     +       disb_c(K,izc)-size,fromor_c(K,iyc))            
        call draw3d(fildes,fromor_c(K,ixc),
     +       disb_c(K,izc)+size,fromor_c(K,iyc))
c
c       
        call move3d(fildes,fromor_c(K,ixc),
     +       disb_c(K,izc),fromor_c(K,iyc)-size)            
        call draw3d(fildes,fromor_c(K,ixc),
     +       disb_c(K,izc),fromor_c(K,iyc)+size)        
        end do

c
c       CLOUD DONE
c
c       *********************************************************
c       *********************************************************
c
c
c
c
c       draw labels on plot
c
c
c
     
        lcol= icolor(4)
        call labels(fildes,I,J,lcol)
      call make_picture_current(fildes)
c
c
c       That's it for this pair now loop and wait for key-board to 
c       ask for movement, stereo plot or next pair
c ***********************************************************
c       camera parameter adjustment
c ***********************************************************
983     format(2x, 'Do you wish to ROTATE IMAGE for a while?',/,
     +  '1 -  for a sinlge 5  degree step (for stereo pair)',/,
     +  'y for ROTATION..<cr> to skip.',$)
c
c
c
c
c       hardwire rotation variables here:
c
        jloop=10
        kloop=75
c left turn first:      sign = -0.20 ! for both direction and magnitude of rotation
        sign = 0.20 ! for both direction and magnitude of rotation
        speed = 0.025 ! fast - for timed delay to slow animation
c
c
c
        print 983
        read(*,'(A)')reply
        call mode (3)
        if (reply .eq. ' ') goto 998
        if (reply .eq. '1') then
        jloop=1
        kloop=1
        sign=1.0
        reply='y'
        end if
        if((reply.eq.'y').or.(reply.eq.'Y'))then 
c
c
c       THIS IS FIGURE ROTATION LOOP
c
c
        do 7999 nz=1,jloop
        sign=sign*(-1.0) ! change rotation direction
        do 8001 mz=1,kloop
c
            theta=theta+grad*sign
c
c       ***********************************************************
c       reset camera position variables
c       ***********************************************************
        radius=factor
        camera(INT(CAM_CAMX))=radius*COS(phi)*SIN(theta)+xref
        camera(INT(CAM_CAMY))=radius*SIN(phi)+yref
        camera(INT(CAM_CAMZ))=-(radius*COS(phi)*COS(theta))+zref
        camera(INT(CAM_REFX))=xref
        camera(INT(CAM_REFY))=yref
        camera(INT(CAM_REFZ))=zref
        camera(INT(CAM_FIELD_OV))=60.
        camera(INT(CAM_UPX))=-SIN(theta)*SIN(phi)
        camera(INT(CAM_UPY))=COS(phi)
        camera(INT(CAM_UPZ))=SIN(phi)*COS(theta)
        camera(INT(CAM_PROJECTION))=CAM_PARALLEL
        camera(INT(CAM_FRONT))=0.
        camera(INT(CAM_BACK))=0.
        call colors(fildes)
c***********************************************************
c       reset the port
c***********************************************************
        call clear_control(fildes,CLEAR_VIEWPORT)
        call clear_view_surface(fildes)
        call set_p1_p2(fildes,FRACTIONAL,0.,0.,0.,1.,.9,1.0)
        call vdc_extent(fildes,-1.0,-1.0,-1.0,1.25,1.0,1.0)
        call mapping_mode(fildes,ISOTROPIC)
        call view_camera(fildes,camera)
        call background_color_idx(fildes,0)
        call line_color_idx(fildes,5)
        call view_camera(fildes,camera)
c ***********************************************************
c       re-draw the axes
c ***********************************************************
        call line_color_idx(fildes,5)
        call move3d(fildes,0.0,0.0,0.0)
        call draw3d(fildes,0.0,1.0,0.0)
        call draw3d(fildes,0.0,1.0,1.0)
        call draw3d(fildes,0.0,0.0,1.0)
        call draw3d(fildes,0.0,0.0,0.0)
        call draw3d(fildes,1.0,0.0,0.0)
        call draw3d(fildes,1.0,0.0,1.0)
        call draw3d(fildes,0.0,0.0,1.0)
        call move3d(fildes,0.0,1.0,1.0)
        call draw3d(fildes,1.0,1.0,1.0)
        call draw3d(fildes,1.0,0.0,1.0)
      call move3d(fildes,0.0,1.0,0.0)
      call draw3d(fildes,1.0,1.0,0.0)
      call draw3d(fildes,1.0,0.0,0.0)
      call move3d(fildes,1.0,1.0,0.0)
      call draw3d(fildes,1.0,1.0,1.0)
      call make_picture_current(fildes)   !dump the buffer
        call line_color_idx(fildes,icolor(5))
c       define aliases to keep track or coordinates
c
        do K=1,ns-1 !    draw all steps for this pair NOW

            call move3d(fildes,fromor(K,ixc),
     +       disb(K,izc),fromor(K,iyc))     
        
        call draw3d(fildes,fromor(K+1,ixc),
     +       disb(K+1,izc),fromor(K+1,iyc))     

        end do 
c       
c       projection drawn- now highlight w/marker and particle numbers
c       represented


        lcol= icolor(8)
        call mark(fildes,fromor(ns,ixc),
     +       disb(ns,izc),fromor(ns,iyc),lcol)
        
        call numbers(fildes,fromor(ns,ixc),
     +       disb(ns,izc),fromor(ns,iyc),I,J,lcol)
     
c
c       ******************************************************
c       ******************************************************
c
c       NOW DRAW SIG LIMITS 'CLOUD'
c     "cloud" of 20 final points for all 20 control datasets!!
c       size of each 3-D 'point' in cloud determined by variable 'size'
c
c
        call line_color_idx(fildes,icolor(10))
        size=0.005 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
c
c
c
c
        do K=1,NCFR ! outer loop = number of steps
        call move3d(fildes,fromor_c(K,ixc)-size,
     +       disb_c(K,izc),fromor_c(K,iyc))         
        call draw3d(fildes,fromor_c(K,ixc)+size,
     +       disb_c(K,izc),fromor_c(K,iyc))
c    
c       
        call move3d(fildes,fromor_c(K,ixc),
     +       disb_c(K,izc)-size,fromor_c(K,iyc))            
        call draw3d(fildes,fromor_c(K,ixc),
     +       disb_c(K,izc)+size,fromor_c(K,iyc))
c
c       
        call move3d(fildes,fromor_c(K,ixc),
     +       disb_c(K,izc),fromor_c(K,iyc)-size)            
        call draw3d(fildes,fromor_c(K,ixc),
     +       disb_c(K,izc),fromor_c(K,iyc)+size)        
        end do

c
c       CLOUD DONE
c
c       *********************************************************
c       *********************************************************  
          
        lcol= icolor(4)
        call labels(fildes,I,J,lcol)

      call make_picture_current(fildes)   !dump the buffer
c
c       *****************************************
c       PAUSE IN DISPLAY TO CONTROL MOVIE SPEED
c       ****************************************
        time2=0.0
78547   s=secnds(0.0)
        s=secnds(s)
        time2=time2+s
        if(time2.lt.speed) goto 78547
c
8001    continue
7999    continue
        end if
c       END ROTATE - IF SELECTED  - HERE 

1299     format(2x, '<cr> to continue')
        print 1299
        read(*,'(A)')reply
        call mode (3)
        if (reply .eq. ' ') continue
c

c ***********************************************************
c       initialize the camera settings here
c ***********************************************************
        factor=1.6
        xref=0.5
        yref=0.5
        zref=0.5
        theta=degrad(-25.)
c       theta=degrad(-20.)
        phi=degrad(36.)
c       phi=degrad(35.)
        grad=degrad(5.0)
c ***********************************************************
c       reset camera position variables
c ***********************************************************
        radius=factor
        camera(INT(CAM_CAMX))=radius*COS(phi)*SIN(theta)+xref
        camera(INT(CAM_CAMY))=radius*SIN(phi)+yref
        camera(INT(CAM_CAMZ))=-(radius*COS(phi)*COS(theta))+zref
        camera(INT(CAM_REFX))=xref
        camera(INT(CAM_REFY))=yref
        camera(INT(CAM_REFZ))=zref
        camera(INT(CAM_FIELD_OV))=60.
        camera(INT(CAM_UPX))=-SIN(theta)*SIN(phi)
        camera(INT(CAM_UPY))=COS(phi)
        camera(INT(CAM_UPZ))=SIN(phi)*COS(theta)
        camera(INT(CAM_PROJECTION))=CAM_PARALLEL
        camera(INT(CAM_FRONT))=0.
        camera(INT(CAM_BACK))=0.
        call mode(3)
        call colors(fildes)
c***********************************************************
c       reset the port
c***********************************************************
        call clear_control(fildes,CLEAR_VIEWPORT)
        call clear_view_surface(fildes)
        call set_p1_p2(fildes,FRACTIONAL,0.,0.,0.,1.,.9,1.0)
        call vdc_extent(fildes,-1.0,-1.0,-1.0,1.25,1.0,1.0)
        call mapping_mode(fildes,ISOTROPIC)
        call view_camera(fildes,camera)
        call background_color_idx(fildes,0)
        call line_color_idx(fildes,5)
        call view_camera(fildes,camera)
c ***********************************************************
 998  continue
      end do                    ! NEXT BIG INNER LOOP FOR SAME I, diff J
      end do


c       End of BIG LOOP for ALL PAIRS ready to loop to readin another file or exit..
c
        call gclose(fildes)
      print 225
 225  format (1x,'c to continue .. other char to exit',$)
      read (*,230) inst
 230  format (1A1)
      if ((inst.eq.'c').or.(inst.eq.'C')) goto 5



c
c       9999    print 3999
c       3999    format(2x,'FATAL READ ERROR')
C       stop
c
c
c       COME HERE TO LEAVE THE PROGRAM
c
4001  call mode(3)
        STOP
      END        
                                                                              
c
c
c
c
c
c       FUNCTIONS AND SUBROUTINES
c
c
c       ****************************************************************
c       FUNCTION degrad()
c               a function for converting from degrees to radians
c       ****************************************************************
        real FUNCTION degrad(degree)
        real degree, pi
        parameter (pi=3.1415927)
        degrad=degree*pi/180.
        return
        end
c       ****************************************************************
c       FUNCTION raddeg()
c       a function to convert from radians to degrees
c       ****************************************************************
        real FUNCTION raddeg(radian)
        real radian,pi
        parameter (pi=3.1415927)
        raddeg=radian*180./pi
        return
        end
c
c
c
c
C       *** subroutine to add number label***
        subroutine numbers(fildes,x,y,z,I,J,lcol)
        
        include 'sbparam.defs'
        include 'config.defs'
        real x,y,z
        real size
        integer*4 I,J
        character*30  strng
c       label end of trajectory
c
c
          size=0.010 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
        
        call text_color_idx(fildes,lcol)
        call character_height(fildes, 0.055)
        write(unit=strng,fmt='(i3,a1,i0,a1)')I,",",J,char(0)
        call text3d(fildes,x+size,y+size,z+size,strng,1,0)
        return   
        end

c
C       *** subroutine to add coord labels***
        subroutine labels(fildes,I,J,lcol)
        
        include 'sbparam.defs'
        include 'config.defs'
c        real x,y,z
        real size
        integer*4 I,J
        character*30  strng
        if(.false.)print *,I !suppress unused variable warning
        if(.false.)print *,J !suppress unused variable warning
        size=0.045 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
        size2=0.030 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
        size3=0.240 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
        call text_color_idx(fildes,lcol)
        call character_height(fildes, 0.045)
c
c       x- axis is distance of particle x from origin
c
        write(unit=strng,fmt='(a7,a1)')"X(J-J0)",char(0)
        call text3d(fildes,0.0,0.0-size,0.0,strng,1,0)
        write(unit=strng,fmt='(a1,a1)')"X",char(0)
        call text3d(fildes,1.0,0.0-size,0.0,strng,1,0)

c       y- axis is distance of particle y from origin

        write(unit=strng,fmt='(a7,a1)')"Y(I-I0)",char(0)
        call text3d(fildes,1.0+size,0.0,0.0,strng,1,0)
        write(unit=strng,fmt='(a1,a1)')"Y",char(0)
        call text3d(fildes,1.0+size,0.0,1.0,strng,1,0)

c       z-axis is distance between particles in pair
c
        write(unit=strng,fmt='(a6,a1)')"Z(I-J)",
     +  char(0)
        call text3d(fildes,0.0-size3,0.0,0.0,strng,1,0)
        write(unit=strng,fmt='(a1,a1)')"Z",
     +  char(0)
        call text3d(fildes,0.0-size3,1.0,0.0,strng,1,0)
c
c
c       origin
c
        write(unit=strng,fmt='(a6,a1)')"Origin",char(0)
        call text3d(fildes,1.0-size2,1.0+size2,1.0+size2,strng,1,0)
c
c       max from origin, but in coord = 0,0,0 !!!
c
c       write(unit=strng,fmt='(a5,a1)')"1,1,1",char(0)
c       call text3d(fildes,0.0+size,0.0+size,0.0+size,strng,1,0)
c
c
c
        return   
        end
c
c
c       *** subroutine to highlight final position***
        subroutine mark(fildes,x,y,z,lcol)
        include 'sbparam.defs'
        include 'config.defs'
        real x,y,z
        real size
        size=0.025 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
        call line_color_idx(fildes,lcol)   
        call move3d(fildes,x-size,y,z) 
        call draw3d(fildes,x+size,y,z)
        call move3d(fildes,x,y-size,z)
        call draw3d(fildes,x,y+size,z)
        call move3d(fildes,x,y,z-size)
        call draw3d(fildes,x,y,z+size)
        
        return
        end 

