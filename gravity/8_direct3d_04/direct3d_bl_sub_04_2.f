        program direct3d_bl_sub
c       ****************************************************************************
c       Program to read *dir file
c       generated by postodir3d_*.f subroutine in main gravity programs
c
c       Displays rotating 3-D plot of distance between
c       two particles and distance of each with respect to origin see: 
c       Lindsey and Gerstein J. Neurosci Meth, 2005..
c
c       Reduce ambiguities associated with gravity by 
c       aiding identification of the direction of an interaction (pre vs post-synaptic) when
c       effector and acceptor charges decay in opposite directions
c
c               NOTE The program REQUIRES a readin of a *.dir file generated by a 
c       main gravity program or a significance test version of gravity that gens  control files. 
c
c
c       version with _sub extension manually plots subset of pairs in same plot
c       version with _sub_2 fixes defime ns=K-1 for loop count bug
c       *******************************************************************************
        INCLUDE 'head_04.def'
        include 'config.defs'
c       or other appropriate header with cblock, iblock, rblock, etc
c       
c       NOTE nstep= max number of displayed gravity 'steps' or frames
c       saved in input files;  npairs = MN*(MN-1)/2; MN= max number of
c       different event codes (inc neurons) allowed
c
c
c
C       place at top before parameters
        parameter(nstep=1000,npair=2016, pi=3.1415926,MN=64)
        dimension PDIS(MN,MN),dis(MN), fromor(nstep,MN)
        dimension disb(nstep,npair)
        dimension icolor(npair) ! should = npair
        real  xref,yref,zref,radius,theta,phi,factor
        real camera(13)
        real grad,sign
        character*30 DIRFILE,reply,repl2
        data(icolor(i), i=1,120) 
     +  /3,4,5,6,7,8,9,10,11,12,13,14,15,16,
     +  17,18,19,20,21,22,23,24,
     +  25,26,27,28,29,30,31,32,33,34,35,
     +  36,37,38,39,40,41,42,43,44,45,46,47,
     +  48,49,50,51,52,53,54,55,56,57,58,
     +  59,60,61,62,63,64,65,66,67,68,
     +  69,70,71,72,73,74,75,76,77,78,
     +  79,80,81,82,83,84,85,86,87,88,
     +  89,90,91,92,93,94,95,96,97,98,
     +  99,100,101,102,103,104,105,106,107,108,
     +  109,110,111,112,113,114,115,116,117,118,
     +  119,120,1,2/
        include 'sbparam.defs'
c
c
c       INPUT *.dir FILES NAME (TO BE READ IN or passed from calling program)
c
c       ***********************************
c       **********************************
c       **********************************
c       PROGRAM ENTRY AND REDO POINT
c       ***********************************
c       **********************************
c       **********************************
c                                                  
        print 10
10      FORMAT (2x,' INPUT *.dir filename, <CR> to exit: ',$)
        read (*,'(A)') DIRFILE
        if (DIRFILE.eq.' ') goto 4001 ! EXIT PROGRAM                                                      
        OPEN(UNIT=1,FILE=DIRFILE,STATUS='OLD',FORM='UNFORMATTED')
c
c       read header
c
        read (1) CBLOCK,IBLOCK,RBLOCK !read in header info
c
c
c       DEBUG
c
c
c
c9468   format(2x,'nstep= ',I5,1x,'N=  ',I8)
c       print 9468,nstep,N
c        read(*,'(A)')reply
c        if (reply .eq. ' ') continue
c
c
c
c
c       end debug
c
c
c
c
C       ***** LOOP TO READ  INPUT BLOCKS (records) ***** 
c       ****** and fill display arrays *************  
c
        do K=1,nstep                                        
        READ (1,END=902)((PDIS(I,J),J=1,I-1),I=2,N)
c
c
c       DEBUG
c
c
c9464   format(2x,'K: ',I5,'I:',I3,1x,'J:',I3,1x,'dis: ',F9.3)
c       do I =2,N
c       do J=1,I-1
c       print 9464,K,I,J,PDIS(I,J)
c       end do
c       end do
c
c
c        read(*,'(A)')reply
c        if (reply .eq. ' ') continue
c
c
c
c       END DEBUG
c
c
c
c

        ipt=1
        do  I=2,N
            do J=1,I-1
            disb(K,ipt)= PDIS(I,J) ! store distance between I,J at time step K
            ipt=ipt+1  
c                use ipt, NOT array dimensioned I x J x K > less space
             end do
        end do
c
        READ (1,END=902)(dis(I),I=1,N)
        do L =1, N
        fromor(K,L)=dis(L) ! store dis frm orig for particle N at time step K
        end do                                
                      
c       debug
c
c
c9466   format(2x,'step',I5,1x,'particle:',I3,1x,'dis: ',F9.3)
c       do L =1, N
c       print 9466,K,L,fromor(K,L)
c       end do

c        read(*,'(A)')reply
c        if (reply .eq. ' ') continue
c
c
c
c       end debug
c
c
c
c
c
        end do
c
C       **** DONE WITH READ ************
902     CLOSE (UNIT=1)
        ns=K-1
        numpr=(N*(N-1))/2 ! number of pairs                                                               
c
c       *****  initialize parameter maximums and minimums  ***********
c
c       trajectories are plotted in 3D coordinate system...
c
c       z- axis is distance between particles in pair
c       y- axis is distance of particle y from origin
c       x- axis is distance of particle x from origin
c
        zmin=10000000.
        zmax=0.
        xmax=0.
        ymax=0.
        fmax=0.
c       *****  get minimum and maximum z values  ***
        do K=1,ns
          do L =1, N
            zmin=AMIN1(zmin,fromor(K,L))
            zmax=AMAX1(zmax,fromor(K,L))
          end do
        end do
c       *****  get minimum and maximum x, y values  ***

        do K=1,ns ! outer loop = number of steps
          do  L=1, numpr ! inner loop = number of different pairs
            xmax=AMAX1(xmax,disb(K,L))
          end do
        end do
        ymax=xmax
        fmax=AMAX1(fmax,xmax)
        fmax=AMAX1(fmax,ymax)
        fmax=AMAX1(fmax,zmax)
        sclfac=1.0/fmax ! all x,y,z coord mul by this to fit in graph space
c
c       RESCALE DATA TO BE PLOTTED TO FIT IN COORDINATE SPACE
c       DO THIS NOW TO SPEED UP PLOT ROTATION LATER
c
c       ...and change coord by sub all from 1.0
c
        do K=1,ns
          do L =1, N
            fromor(K,L)= 1.0-(fromor(K,L)*sclfac)
c           fromor(K,L)= fromor(K,L)*sclfac
           end do
        end do
        do K=1,ns ! outer loop = number of steps
          do  L=1, numpr ! inner loop = number of different pairs
c           disb(K,L)= 1.0 - (disb(K,L)*sclfac)
            disb(K,L)=  disb(K,L)*sclfac
          end do
        end do
c
c
        call mode(0)
        fildes=gopen(1024,768,-700,-5,'direct3d')
        if (fildes.eq.-1) stop
c
        call colors(fildes)
        call mode(3) 
c ***********************************************************
c       initialize the camera settings here
c ***********************************************************
        factor=1.6
        xref=0.5
        yref=0.5
        zref=0.5
        theta=degrad(-25.)
c       theta=degrad(-20.)
        phi=degrad(36.)
c       phi=degrad(35.)
        grad=degrad(5.0)
c ***********************************************************
c       set camera parameters here
c ***********************************************************
        radius=factor
        camera(INT(CAM_CAMX))=radius*COS(phi)*SIN(theta)+xref
        camera(INT(CAM_CAMY))=radius*SIN(phi)+yref
        camera(INT(CAM_CAMZ))=-(radius*COS(phi)*COS(theta))+zref
        camera(INT(CAM_REFX))=xref
        camera(INT(CAM_REFY))=yref
        camera(INT(CAM_REFZ))=zref
        camera(INT(CAM_FIELD_OV))=60.
        camera(INT(CAM_UPX))=-SIN(theta)*SIN(phi)
        camera(INT(CAM_UPY))=COS(phi)
        camera(INT(CAM_UPZ))=SIN(phi)*COS(theta)
        camera(INT(CAM_PROJECTION))=CAM_PARALLEL
        camera(INT(CAM_FRONT))=0.
        camera(INT(CAM_BACK))=0.
        call view_camera(fildes,camera)
        call mode(3)
        call colors(fildes)
c
c
c***********************************************************
c       set the port
c***********************************************************
        call clear_control(fildes,CLEAR_VIEWPORT)
        call clear_view_surface(fildes)
        call set_p1_p2(fildes,FRACTIONAL,0.,0.,0.,1.,.9,1.0)
        call vdc_extent(fildes,-1.0,-1.0,-1.0,1.25,1.0,1.0)
        call mapping_mode(fildes,ISOTROPIC)
        call view_camera(fildes,camera)
        call background_color_idx(fildes,0)
        call line_color_idx(fildes,5)
        call view_camera(fildes,camera)
c ***********************************************************
c ***********************************************************
c       draw the axes
c ***********************************************************
        call move3d(fildes,0.0,0.0,0.0)
        call draw3d(fildes,0.0,1.0,0.0)
        call draw3d(fildes,0.0,1.0,1.0)
        call draw3d(fildes,0.0,0.0,1.0)
        call draw3d(fildes,0.0,0.0,0.0)
        call draw3d(fildes,1.0,0.0,0.0)
        call draw3d(fildes,1.0,0.0,1.0)
        call draw3d(fildes,0.0,0.0,1.0)
        call move3d(fildes,0.0,1.0,1.0)
        call draw3d(fildes,1.0,1.0,1.0)
        call draw3d(fildes,1.0,0.0,1.0)
        call move3d(fildes,0.0,1.0,0.0)
        call draw3d(fildes,1.0,1.0,0.0)
        call draw3d(fildes,1.0,0.0,0.0)
        call move3d(fildes,1.0,1.0,0.0)
        call draw3d(fildes,1.0,1.0,1.0)
        lcol= icolor(4)
        call labels(fildes,I,J,lcol)
c
c       z-axis is distance between particles in pair
c       y- axis is distance of particle y from origin
c       x- axis is distance of particle x from origin
c
c
c       *****************************************
c       *****************************************
c       SET UP PAIR COUNTER HERE
        icount=0

          do  I=2,N
            do J=1,I-1

c       Allow this pair?
c
c
1333   format(2x,'Plot pair I:',I3,1x,'J:',I3,1x,'?')
       print 1333,I,J
1334    format(2x, 'N <RET> = NO     <RET> = YES')
        print 1334
c
        read(*,'(A)')repl2
        if ((repl2 .eq. 'N').or.(repl2 .eq. 'n')) goto 1335
        if ((repl2 .eq. ' ').or.(repl2 .eq. ' ')) continue


c
c
c
c       END DEBUG

            icount = icount+1
        lcol= icolor(icount+1)
        call line_color_idx(fildes,icolor(icount+1))
c
c       define aliases to keep track or coordinates
        ixc=J
        iyc=I
        izc=icount
c
        do K=1,ns-1 !    draw all steps for this pair NOW

        call move3d(fildes,fromor(K,ixc),
     +       disb(K,izc),fromor(K,iyc))     
        call draw3d(fildes,fromor(K+1,ixc),
     +       disb(K+1,izc),fromor(K+1,iyc))     
c
      end do 
c       projection drawn- now highlight w/marker and particle numbers
c       represented
c
c       in next two calls, lcol=color value for respective label feature
c
c       lcol= icolor(icount+1)
        call mark(fildes,fromor(ns,ixc),
     +       disb(ns,izc),fromor(ns,iyc),lcol)
        
        call numbers(fildes,fromor(ns,ixc),
     +       disb(ns,izc),fromor(ns,iyc),I,J,lcol)
c       lcol= icolor(4)
c        call labels(fildes,I,J,lcol)
c      call make_picture_current(fildes)
      end do
 1335 continue
      end do
c
c
c       lcol= icolor(4)
c        call labels(fildes,I,J,lcol)
      call make_picture_current(fildes)
c
c
c       That's it now loop and wait for key-board to 
c       ask for movement or stereo plot 
c ***********************************************************
c       camera parameter adjustment
c ***********************************************************
983     format(2x, 'Do you wish to ROTATE IMAGE',/,
     +  '1 -  for a single 5  degree step (for stereo pair)?')
c
c
c
c       hardwire rotation variables here:
c
        jloop=10
        kloop=75
c left turn first:      sign = -0.20 ! for both direction and magnitude of rotation
        sign = 0.20 ! for both direction and magnitude of rotation
c       speed = 0.005 !  - for timed delay to slow animation
        speed = 0.025 !  - for timed delay to slow animation
c
c
c
        print 983
        read(*,'(A)')reply
        call mode (3)
        if (reply .eq. ' ') goto 998
        if (reply .eq. '1') then
        jloop=1
        kloop=1
        sign=1.0
        reply='y'
        end if
        if((reply.eq.'y').or.(reply.eq.'Y'))then 
c
c
c       THIS IS FIGURE ROTATION LOOP
c
c
        do 7999 nz=1,jloop
        sign=sign*(-1.0) ! change rotation direction
        do 8001 mz=1,kloop
c
            theta=theta+grad*sign
c
c       ***********************************************************
c       reset camera position variables
c       ***********************************************************
        radius=factor
        camera(INT(CAM_CAMX))=radius*COS(phi)*SIN(theta)+xref
        camera(INT(CAM_CAMY))=radius*SIN(phi)+yref
        camera(INT(CAM_CAMZ))=-(radius*COS(phi)*COS(theta))+zref
        camera(INT(CAM_REFX))=xref
        camera(INT(CAM_REFY))=yref
        camera(INT(CAM_REFZ))=zref
        camera(INT(CAM_FIELD_OV))=60.
        camera(INT(CAM_UPX))=-SIN(theta)*SIN(phi)
        camera(INT(CAM_UPY))=COS(phi)
        camera(INT(CAM_UPZ))=SIN(phi)*COS(theta)
        camera(INT(CAM_PROJECTION))=CAM_PARALLEL
        camera(INT(CAM_FRONT))=0.
        camera(INT(CAM_BACK))=0.
        call colors(fildes)
c***********************************************************
c       reset the port
c***********************************************************
        call clear_control(fildes,CLEAR_VIEWPORT)
        call clear_view_surface(fildes)
        call set_p1_p2(fildes,FRACTIONAL,0.,0.,0.,1.,.9,1.0)
        call vdc_extent(fildes,-1.0,-1.0,-1.0,1.25,1.0,1.0)
        call mapping_mode(fildes,ISOTROPIC)
        call view_camera(fildes,camera)
        call background_color_idx(fildes,0)
        call view_camera(fildes,camera)
c ***********************************************************
c       re-draw the axes
c ***********************************************************
        call line_color_idx(fildes,5)
        call move3d(fildes,0.0,0.0,0.0)
        call draw3d(fildes,0.0,1.0,0.0)
        call draw3d(fildes,0.0,1.0,1.0)
        call draw3d(fildes,0.0,0.0,1.0)
        call draw3d(fildes,0.0,0.0,0.0)
        call draw3d(fildes,1.0,0.0,0.0)
        call draw3d(fildes,1.0,0.0,1.0)
        call draw3d(fildes,0.0,0.0,1.0)
        call move3d(fildes,0.0,1.0,1.0)
        call draw3d(fildes,1.0,1.0,1.0)
        call draw3d(fildes,1.0,0.0,1.0)
        call move3d(fildes,0.0,1.0,0.0)
        call draw3d(fildes,1.0,1.0,0.0)
        call draw3d(fildes,1.0,0.0,0.0)
        call move3d(fildes,1.0,1.0,0.0)
        call draw3d(fildes,1.0,1.0,1.0)
        lcol=icolor(4)
        call labels(fildes,I,J,lcol)
c       call make_picture_current(fildes)   !dump the buffer
c       call line_color_idx(fildes,icolor(5))
c
c       SET UP PAIR COUNTER HERE
c
        icount=0

          do  I=2,N
            do J=1,I-1
c       Allow this pair?
c
c
       print 1333,I,J
        print 1334
c
        read(*,'(A)')repl2
        if ((repl2 .eq. 'N').or.(repl2 .eq. 'n')) goto 1435
        if ((repl2 .eq. ' ').or.(repl2 .eq. ' ')) continue

            icount = icount+1
        lcol= icolor(icount+1)
        call line_color_idx(fildes,lcol)
c
c       define aliases to keep track or coordinates
        ixc=J
        iyc=I
        izc=icount
c
        do K=1,ns-1 !    draw all steps for this pair NOW

            call move3d(fildes,fromor(K,ixc),
     +       disb(K,izc),fromor(K,iyc))     

        call draw3d(fildes,fromor(K+1,ixc),
     +       disb(K+1,izc),fromor(K+1,iyc))     
c
      end do 
c       projection drawn- now highlight w/marker and particle numbers
c       represented
c
c       in next two calls, lcol=color value for respective label feature
c
        call mark(fildes,fromor(ns,ixc),
     +       disb(ns,izc),fromor(ns,iyc),lcol)
        
        call numbers(fildes,fromor(ns,ixc),
     +       disb(ns,izc),fromor(ns,iyc),I,J,lcol)
c
c      call make_picture_current(fildes)
c
c
      end do
 1435 continue
      end do
      call make_picture_current(fildes)
c
c
c       *****************************************
c       PAUSE IN DISPLAY TO CONTROL MOVIE SPEED
c       ****************************************
        time2=0.0
78547   s=secnds(0.0)
        s=secnds(s)
        time2=time2+s
        if(time2.lt.speed) goto 78547
c
8001    continue
7999    continue
        end if
c       END ROTATE - IF SELECTED  - HERE 

1299    format(2x, '<cr> to exit')
998        print 1299
        read(*,'(A)')reply
          call mode (3)
        if (reply .eq. ' ') goto 4001
c       COME HERE TO LEAVE THE PROGRAM
4001        call gclose(fildes)
        call mode(3)
        STOP
      END        
                                                                              
c
c
c
c
c
c       FUNCTIONS AND SUBROUTINES
c
c
c       ****************************************************************
c       FUNCTION degrad()
c               a function for converting from degrees to radians
c       ****************************************************************
        real FUNCTION degrad(degree)
        real degree, pi
        parameter (pi=3.1415927)
        degrad=degree*pi/180.
        return
        end
c       ****************************************************************
c       FUNCTION raddeg()
c       a function to convert from radians to degrees
c       ****************************************************************
        real FUNCTION raddeg(radian)
        real radian,pi
        parameter (pi=3.1415927)
        raddeg=radian*180./pi
        return
        end
c
c
C       *** subroutine to add number label***
        subroutine numbers(fildes,x,y,z,I,J,lcol)
        
        include 'sbparam.defs'
        include 'config.defs'
        real x,y,z
        real size
        integer*4 I,J
        character*30  strng
c       label end of trajectory
c
c
          size=0.010 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
        
        call text_color_idx(fildes,lcol)
        call character_height(fildes, 0.055)
        write(unit=strng,fmt='(i3,a1,i0,a1)')I,",",J,char(0)
        call text3d(fildes,x+size,y+size,z+size,strng,1,0)
        return   
        end

c
C       *** subroutine to add coord labels***
        subroutine labels(fildes,I,J,lcol)
        
        include 'sbparam.defs'
        include 'config.defs'
c        real x,y,z
        real size
        integer*4 I,J
        character*30  strng
        if(.false.)print *,I !suppress unused variable warning
        if(.false.)print *,J !suppress unused variable warning
        size=0.045 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
        size2=0.030 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
        size3=0.240 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
        call text_color_idx(fildes,lcol)
        call character_height(fildes, 0.045)
c
c       x- axis is distance of particle x from origin
c
        write(unit=strng,fmt='(a7,a1)')"X(J-J0)",char(0)
        call text3d(fildes,0.0,0.0-size,0.0,strng,1,0)
        write(unit=strng,fmt='(a1,a1)')"X",char(0)
        call text3d(fildes,1.0,0.0-size,0.0,strng,1,0)

c       y- axis is distance of particle y from origin

        write(unit=strng,fmt='(a7,a1)')"Y(I-I0)",char(0)
        call text3d(fildes,1.0+size,0.0,0.0,strng,1,0)
        write(unit=strng,fmt='(a1,a1)')"Y",char(0)
        call text3d(fildes,1.0+size,0.0,1.0,strng,1,0)

c       z-axis is distance between particles in pair
c
        write(unit=strng,fmt='(a6,a1)')"Z(I-J)",
     +  char(0)
        call text3d(fildes,0.0-size3,0.0,0.0,strng,1,0)
        write(unit=strng,fmt='(a1,a1)')"Z",
     +  char(0)
        call text3d(fildes,0.0-size3,1.0,0.0,strng,1,0)
c
c
c       origin
c
        write(unit=strng,fmt='(a6,a1)')"Origin",char(0)
        call text3d(fildes,1.0-size2,1.0+size2,1.0+size2,strng,1,0)
c
c       max from origin, but in coord = 0,0,0 !!!
c
c       write(unit=strng,fmt='(a5,a1)')"1,1,1",char(0)
c       call text3d(fildes,0.0+size,0.0+size,0.0+size,strng,1,0)
c
c
c
        return   
        end
c
c
c       *** subroutine to highlight final position***
        subroutine mark(fildes,x,y,z,lcol)
        include 'sbparam.defs'
        include 'config.defs'
        real x,y,z
        real size
        size=0.025 ! recall entire plot range = 0.to 1.0 in x,y,z dimensions
        call line_color_idx(fildes,lcol)   
        call move3d(fildes,x-size,y,z) 
        call draw3d(fildes,x+size,y,z)
        call move3d(fildes,x,y-size,z)
        call draw3d(fildes,x,y+size,z)
        call move3d(fildes,x,y,z-size)
        call draw3d(fildes,x,y,z+size)
        
        return
        end 

